{"version":3,"file":"pdftex.js","sources":["src/pdftex.js"],"sourcesContent":["\nclass PdfTeXCompilation {\n  constructor () {\n    this._ready = false\n    this.worker = new Worker('./pdftex-worker.js')\n    this.ready = false\n    var self = this\n\n    this._eventListener = []\n\n    this.worker.addEventListener('message', function (event) {\n      var message = event.data\n      if (message.type === 'err' || message.type === 'log') {\n        self._fire(message.type, message.value)\n      } else if (message.type === 'finish') {\n        self._fire('finish', message.value)\n      } else if (message.type === 'ready') {\n        self._ready = true\n        self._fire('ready')\n      } else {\n        console.warn('Unexpected Worker response..', message)\n      }\n    })\n  }\n  _compile (source, options) {\n    var self = this\n    this.source = source\n    this._options = options || {}\n\n    if (options.debug) {\n      this.on('err', (err) => {\n        console.error(err)\n      })\n      this.on('log', (out) => {\n        console.log(out)\n      })\n    }\n    this.whenReady(function () {\n      self.worker.postMessage({ type: 'start', source: source })\n    })\n  }\n  // notifies event listeners\n  _fire (event, data) {\n    this._eventListener.forEach(l => {\n      if (l[0] === event) {\n        l[1](data)\n      }\n    })\n  }\n  // register an event listener\n  on (event, fn) {\n    this._eventListener.push([event, fn])\n  }\n  // stop the compilaten\n  terminate () {\n    this.worker.terminate()\n  }\n  whenReady (f) {\n    if (this._ready) {\n      f()\n    } else {\n      this.on('ready', f)\n    }\n  }\n}\n\nvar currentWorker = null\nvar nextWorker = new PdfTeXCompilation()\n\nexport default function pdftex (source, options) {\n  if (currentWorker != null) {\n    currentWorker.terminate()\n  }\n  currentWorker = nextWorker\n  nextWorker = new PdfTeXCompilation()\n\n  currentWorker._compile(source, options)\n  return currentWorker\n}\n"],"names":["pdftex","source","options","currentWorker","terminate","nextWorker","PdfTeXCompilation","_compile","_ready","worker","Worker","ready","self","this","_eventListener","addEventListener","event","message","data","type","_fire","value","warn","_options","debug","on","err","error","out","log","whenReady","postMessage","forEach","l","fn","push","f"],"mappings":"iLAqEA,SAAwBA,GAAQC,EAAQC,SACjB,OAAjBC,KACYC,cAEAC,IACH,GAAIC,KAEHC,SAASN,EAAQC,GACxBC,0VA5EHG,yCAEGE,QAAS,OACTC,OAAS,GAAIC,QAAO,2BACpBC,OAAQ,KACTC,GAAOC,UAENC,uBAEAL,OAAOM,iBAAiB,UAAW,SAAUC,MAC5CC,GAAUD,EAAME,IACC,SAAjBD,EAAQE,MAAmC,QAAjBF,EAAQE,OAC/BC,MAAMH,EAAQE,KAAMF,EAAQI,OACP,WAAjBJ,EAAQE,OACZC,MAAM,SAAUH,EAAQI,OACH,UAAjBJ,EAAQE,QACZX,QAAS,IACTY,MAAM,kBAEHE,KAAK,+BAAgCL,gDAIzChB,EAAQC,MACZU,GAAOC,UACNZ,OAASA,OACTsB,SAAWrB,MAEZA,EAAQsB,aACLC,GAAG,MAAO,SAACC,WACNC,MAAMD,UAEXD,GAAG,MAAO,SAACG,WACNC,IAAID,WAGXE,UAAU,aACRrB,OAAOsB,aAAcZ,KAAM,QAASlB,OAAQA,oCAI9Ce,EAAOE,QACPJ,eAAekB,QAAQ,YACtBC,EAAE,KAAOjB,KACT,GAAGE,gCAKPF,EAAOkB,QACJpB,eAAeqB,MAAMnB,EAAOkB,6CAI5BzB,OAAOL,8CAEHgC,GACLvB,KAAKL,gBAGFiB,GAAG,QAASW,YAKnBjC,EAAgB,KAChBE,EAAa,GAAIC"}